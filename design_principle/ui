Absolutely! Here's how to add a Register form directly on your login page, so users can either log in or create a new account on the same screen.

✅ Step-by-Step: Add Registration to Login Page
🔹 1. Update login.html to include a Register section
Here’s a merged version of login + register:

html
Copy
Edit
{% extends "base.html" %}
{% block content %}
<h2>Login</h2>

<form method="POST" action="{{ url_for('login') }}">
  <label>Username:</label><br>
  <input type="text" name="username" required><br><br>

  <label>Password:</label><br>
  <input type="password" name="password" required><br><br>

  <button type="submit" name="action" value="login">Login</button>
</form>

<hr>

<h2>Register</h2>

<form method="POST" action="{{ url_for('register') }}">
  <label>Username:</label><br>
  <input type="text" name="username" required><br><br>

  <label>Password:</label><br>
  <input type="password" name="password" required><br><br>

  <button type="submit">Register</button>
</form>
{% endblock %}
🔹 2. Add register() route in routes.py or auth.py
python
Copy
Edit
from flask import render_template, request, redirect, url_for, flash, session
from app.models import db, User

@app.route('/register', methods=['POST'])
def register():
    username = request.form['username']
    password = request.form['password']

    existing = User.query.filter_by(username=username).first()
    if existing:
        flash("Username already exists.")
        return redirect(url_for('login'))

    new_user = User(username=username)
    new_user.set_password(password)
    db.session.add(new_user)
    db.session.commit()

    flash("Registration successful. Please log in.")
    return redirect(url_for('login'))
🔹 3. Update login() route to check form action
python
Copy
Edit
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST' and request.form.get('action') == 'login':
        username = request.form['username']
        password = request.form['password']

        user = User.query.filter_by(username=username).first()
        if user and user.check_password(password):
            session['username'] = user.username
            return redirect(url_for('dashboard'))
        else:
            flash("Invalid credentials.")
            return redirect(url_for('login'))

    return render_template('login.html')
✅ Result
Your login page shows two forms: Login and Register

New users can register and get redirected to log in

Existing users log in as before

Let me know if you want to:

Automatically log in after registration

Add confirm password or validations

Style the form into two columns or cards

Happy to help!




Yes — using a JSON file to store user credentials (e.g., usernames and passwords) is okay for quick prototypes, but it's not secure or scalable for production. Here's a better design with security, maintainability, and scalability in mind:

✅ Recommended Approach: Use a SQLite Database + Password Hashing
This approach is still lightweight and easy to manage but much more secure than plain JSON.

✅ Step 1: Create a User table in your existing SQLite DB
Use SQLAlchemy to define it (if not already):

python
Copy
Edit
# models.py
from app import db
from werkzeug.security import generate_password_hash, check_password_hash

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(256), nullable=False)
    created_at = db.Column(db.DateTime, default=db.func.now())

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)
✅ Step 2: Update Registration/Login Code
🔐 Register User (e.g., in a CLI or admin page)
python
Copy
Edit
def register_user(username, password):
    if User.query.filter_by(username=username).first():
        return "User already exists"
    new_user = User(username=username)
    new_user.set_password(password)
    db.session.add(new_user)
    db.session.commit()
    return "User created"
🔑 Login Check (used in login() route):
python
Copy
Edit
def authenticate_user(username, password):
    user = User.query.filter_by(username=username).first()
    return user and user.check_password(password)
✅ Step 3: Remove JSON-Based Auth
Delete or archive the users.json file.

Replace old login logic that reads from the JSON.

🛡️ Why this is Better
Feature	JSON File	SQLite + Hashing
Security	❌ Plaintext	✅ Salted hash w/ bcrypt
Scalability	❌ Hard to manage	✅ Easy to index/query
Multi-user support	⚠️ Fragile	✅ Native
Admin tools	❌ Manual editing	✅ Use Flask CLI or page

✅ Optional: Add User Roles or Permissions
Add role column (admin, user, etc.) if needed:

python
Copy
Edit
role = db.Column(db.String(20), default="user")
Let me know if you'd like:

Alembic migration to add User table

A simple admin page to create/manage users

Token-based login for API use

Would you like help migrating your current users from JSON to this DB format?



🔍 This approach uses -webkit-line-clamp to truncate to 2 lines (multi-line ellipsis). It’s well-supported in modern browsers.

<style>
  .comment-cell {
    max-width: 250px;
    display: -webkit-box;
    -webkit-line-clamp: 2;     /* Limit to 2 lines */
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: normal;
    line-height: 1.2em;
    height: 2.4em;
    cursor: help;
  }
</style>


# Update dashboard.html
✅ Enhancements Included:
📌 Comment column added with smart truncation and tooltip (title).

📥 Emoji used for download links (input, result, log).

🔍 Filter Task input styled inline above the table.

🎯 Centered alignment for result and log file columns.


{% extends "base.html" %}
{% block content %}
<h2>Dashboard</h2>
<p>Logged in as: {{ session.username }} | Tenant: {{ session.tenant }}</p>
<a href="{{ url_for('create_task') }}">Create New Task</a> | 
<a href="{{ url_for('search_docs') }}">Search Documents</a>

<!-- Filter Box -->
<div style="display: flex; align-items: center; margin: 15px 0;">
  <label for="taskFilterInput" style="margin-right: 10px; font-weight: bold;">Filter Task:</label>
  <input type="text" id="taskFilterInput" placeholder="Enter keyword..." style="padding: 5px; width: 300px;">
</div>

<!-- Task Table -->
<table border="1" cellspacing="0" cellpadding="5">
  <thead>
    <tr>
      <th>Task ID</th>
      <th>Submitted Time</th>
      <th>Input Metadata</th>
      <th>Using RAG</th>
      <th>Status</th>
      <th style="text-align: center;">Result</th>
      <th style="text-align: center;">Log File</th>
      <th>Comment</th>
      <th>Action</th>
    </tr>
  </thead>
  <tbody>
    {% for task in tasks %}
      <tr>
        <td>
          <a href="{{ url_for('task', task_id=task.task_id) }}">{{ task.task_id }}</a>
        </td>
        <td>
          {{ task.submitted_time.strftime("%Y-%m-%d %H:%M:%S") }}
        </td>
        <td>
          {% if task.filename %}
            📥 <a href="{{ url_for('download', folder=task.username ~ '/' ~ task.task_id, filename=task.filename) }}">{{ task.filename }}</a>
          {% else %}
            N/A
          {% endif %}
        </td>
        <td>{{ task.yes_no }}</td>
        <td>{{ task.status }}</td>
        <td style="text-align: center;">
          {% if task.result_file %}
            📥 <a href="{{ url_for('download', folder=task.username ~ '/' ~ task.task_id, filename=task.result_file) }}">{{ task.result_file }}</a>
          {% else %}
            N/A
          {% endif %}
        </td>
        <td style="text-align: center;">
          {% set log_filename = 'task_' ~ task.task_id ~ '.log' %}
          📥 <a href="{{ url_for('download', folder=task.username ~ '/' ~ task.task_id, filename=log_filename) }}">{{ log_filename }}</a>
        </td>
        <td class="comment-cell" title="{{ task.comment or '' }}">
          {{ task.comment or '' }}
        </td>
        <td>
          {% if task.status == 'Pending' %}
            <form method="POST" action="{{ url_for('cancel_task', task_id=task.task_id) }}" style="display:inline;">
              <button type="submit">Kill Task</button>
            </form>
          {% else %}
            N/A
          {% endif %}
        </td>
      </tr>
    {% else %}
      <tr>
        <td colspan="9">No tasks yet.</td>
      </tr>
    {% endfor %}
  </tbody>
</table>

<!-- Back link -->
<br>
<a href="{{ url_for('dashboard') }}">Back to Dashboard</a>

<!-- Styling for truncated comments -->
<style>
  .comment-cell {
    max-width: 250px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
</style>

<!-- Keyword Filtering Script -->
<script>
  const filterInput = document.getElementById("taskFilterInput");
  filterInput.addEventListener("input", function () {
    const keyword = this.value.toLowerCase();
    const rows = document.querySelectorAll("table tbody tr");

    rows.forEach(row => {
      const text = row.textContent.toLowerCase();
      row.style.display = text.includes(keyword) ? "" : "none";
    });
  });
</script>
{% endblock %}



Absolutely! Here's how to enhance your Dashboard so that:

✅ The comment is shown in the table for each task.

✅ Users can filter tasks by keyword (in any field including comment, status, file names, etc.)

✅ 1. Update the Dashboard Table to Include Comments
In dashboard.html:
A. Add a new <th> for the Comment:
html
Copy
Edit
<th>Comment</th>
B. Add a new <td> in the row for each task:
html
Copy
Edit
<td>{{ task.comment or '' }}</td>
Now your table structure might look like:

html
Copy
Edit
<thead>
  <tr>
    <th>Task ID</th>
    <th>Submitted Time</th>
    <th>Input Metadata</th>
    <th>Using RAG</th>
    <th>Status</th>
    <th>Result</th>
    <th>Log File</th>
    <th>Comment</th>
    <th>Action</th>
  </tr>
</thead>
✅ 2. Add a Keyword Filter Input Box (Client-Side)
Place this above the table:

html
Copy
Edit

<div style="display: flex; align-items: center; margin-bottom: 10px;">
  <label for="taskFilterInput" style="margin-right: 10px; font-weight: bold;">Filter Task:</label>
  <input type="text" id="taskFilterInput" placeholder="Enter keyword..." style="padding: 5px; width: 300px;">
</div>

✅ 3. Add JavaScript to Filter Rows Based on Keyword
Add this at the end of the file (below the table):

html
Copy
Edit
<script>
  const filterInput = document.getElementById("taskFilterInput");
  filterInput.addEventListener("input", function () {
    const keyword = this.value.toLowerCase();
    const rows = document.querySelectorAll("table tbody tr");

    rows.forEach(row => {
      const rowText = row.textContent.toLowerCase();
      row.style.display = rowText.includes(keyword) ? "" : "none";
    });
  });
</script>
✅ Final Output
✏️ Users see the comment for each task in the dashboard.

🔍 Typing in the filter box will instantly hide/show rows based on matches in:

Task ID

Status

RAG selection

File names

🔥 Comments!

Let me know if you'd like to:

Highlight matching text

Add column-specific filters (e.g., filter only by comment)

Add sorting or pagination to improve handling of large task lists
